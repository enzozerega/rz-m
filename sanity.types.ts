// Query TypeMap
import '@sanity/client'

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch'
  background?: string
  foreground?: string
  population?: number
  title?: string
}

export type SanityImagePalette = {
  _type: 'sanity.imagePalette'
  darkMuted?: SanityImagePaletteSwatch
  lightVibrant?: SanityImagePaletteSwatch
  darkVibrant?: SanityImagePaletteSwatch
  vibrant?: SanityImagePaletteSwatch
  dominant?: SanityImagePaletteSwatch
  lightMuted?: SanityImagePaletteSwatch
  muted?: SanityImagePaletteSwatch
}

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions'
  height?: number
  width?: number
  aspectRatio?: number
}

export type Geopoint = {
  _type: 'geopoint'
  lat?: number
  lng?: number
  alt?: number
}

export type Review = {
  _id: string
  _type: 'review'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  role?: string
  content?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: 'bullet' | 'number'
    markDefs?: null
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type Member = {
  _id: string
  _type: 'member'
  _createdAt: string
  _updatedAt: string
  _rev: string
  name?: string
  role?: string
  slug?: Slug
}

export type Talk = {
  _id: string
  _type: 'talk'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  talk?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.fileAsset'
    }
    _type: 'file'
  }
  slug?: Slug
  overview?: string
  description?: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }>
}

export type SanityFileAsset = {
  _id: string
  _type: 'sanity.fileAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  source?: SanityAssetSourceData
}

export type Page = {
  _id: string
  _type: 'page'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  overview?: string
  slug?: Slug
  description?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        _type: 'image'
        _key: string
      }
  >
}

export type Slug = {
  _type: 'slug'
  current?: string
  source?: string
}

export type Settings = {
  _id: string
  _type: 'settings'
  _createdAt: string
  _updatedAt: string
  _rev: string
  menuItems?: Array<
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'home'
      }
    | {
        _ref: string
        _type: 'reference'
        _weak?: boolean
        [internalGroqTypeReferenceTo]?: 'page'
      }
  >
  logo?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
}

export type Home = {
  _id: string
  _type: 'home'
  _createdAt: string
  _updatedAt: string
  _rev: string
  title?: string
  slogan?: string
  image?: {
    asset?: {
      _ref: string
      _type: 'reference'
      _weak?: boolean
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
    }
    hotspot?: SanityImageHotspot
    crop?: SanityImageCrop
    _type: 'image'
  }
  displaypoll?: boolean
  poll?: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        _type: 'image'
        _key: string
      }
  >
}

export type SanityImageCrop = {
  _type: 'sanity.imageCrop'
  top?: number
  bottom?: number
  left?: number
  right?: number
}

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot'
  x?: number
  y?: number
  height?: number
  width?: number
}

export type SanityImageAsset = {
  _id: string
  _type: 'sanity.imageAsset'
  _createdAt: string
  _updatedAt: string
  _rev: string
  originalFilename?: string
  label?: string
  title?: string
  description?: string
  altText?: string
  sha1hash?: string
  extension?: string
  mimeType?: string
  size?: number
  assetId?: string
  uploadId?: string
  path?: string
  url?: string
  metadata?: SanityImageMetadata
  source?: SanityAssetSourceData
}

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData'
  name?: string
  id?: string
  url?: string
}

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata'
  location?: Geopoint
  dimensions?: SanityImageDimensions
  palette?: SanityImagePalette
  lqip?: string
  blurHash?: string
  hasAlpha?: boolean
  isOpaque?: boolean
}

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | Review
  | Member
  | Talk
  | SanityFileAsset
  | Page
  | Slug
  | Settings
  | Home
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
export declare const internalGroqTypeReferenceTo: unique symbol
// Source: ./sanity/lib/queries.ts
// Variable: homePageQuery
// Query: *[_type == "home"][0]{    _id,    _type,    slogan,    title,    poll,    displaypoll,    "imageUrl": image.asset->url,    "talks":*[_type == "talk"]{      _id,      _type,      slug,      title,      overview,      "talkUrl": talk.asset->url    },    "reviews":*[_type == "review"]{      _id,      _type,      name,      role,      content    }  }
export type HomePageQueryResult = {
  _id: string
  _type: 'home'
  slogan: string | null
  title: string | null
  poll: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        _type: 'image'
        _key: string
      }
  > | null
  displaypoll: boolean | null
  imageUrl: string | null
  talks: Array<{
    _id: string
    _type: 'talk'
    slug: Slug | null
    title: string | null
    overview: string | null
    talkUrl: string | null
  }>
  reviews: Array<{
    _id: string
    _type: 'review'
    name: string | null
    role: string | null
    content: Array<{
      children?: Array<{
        marks?: Array<string>
        text?: string
        _type: 'span'
        _key: string
      }>
      style?: 'normal'
      listItem?: 'bullet' | 'number'
      markDefs?: null
      level?: number
      _type: 'block'
      _key: string
    }> | null
  }>
} | null
// Variable: pagesBySlugQuery
// Query: *[_type == "page" && slug.current == $slug][0] {    _id,    _type,    description,    overview,    title,    "slug": slug.current,  }
export type PagesBySlugQueryResult = {
  _id: string
  _type: 'page'
  description: Array<
    | {
        children?: Array<{
          marks?: Array<string>
          text?: string
          _type: 'span'
          _key: string
        }>
        style?: 'normal'
        listItem?: 'bullet' | 'number'
        markDefs?: Array<{
          href?: string
          _type: 'link'
          _key: string
        }>
        level?: number
        _type: 'block'
        _key: string
      }
    | {
        asset?: {
          _ref: string
          _type: 'reference'
          _weak?: boolean
          [internalGroqTypeReferenceTo]?: 'sanity.imageAsset'
        }
        hotspot?: SanityImageHotspot
        crop?: SanityImageCrop
        caption?: string
        _type: 'image'
        _key: string
      }
  > | null
  overview: string | null
  title: string | null
  slug: string | null
} | null
// Variable: talkBySlugQuery
// Query: *[_type == "talk" && slug.current == $slug][0] {    _id,    _type,    overview,    description,    "slug": slug.current,    title,    "talkUrl": talk.asset->url  }
export type TalkBySlugQueryResult = {
  _id: string
  _type: 'talk'
  overview: string | null
  description: Array<{
    children?: Array<{
      marks?: Array<string>
      text?: string
      _type: 'span'
      _key: string
    }>
    style?: 'normal'
    listItem?: never
    markDefs?: Array<{
      href?: string
      _type: 'link'
      _key: string
    }>
    level?: number
    _type: 'block'
    _key: string
  }> | null
  slug: string | null
  title: string | null
  talkUrl: string | null
} | null
// Variable: settingsQuery
// Query: *[_type == "settings"][0]{    _id,    _type,    menuItems[]{      _key,      ...@->{        _type,        "slug": slug.current,        title      }    },    "logoUrl": logo.asset->url,    "team":*[_type == "member"]{      name,      role    },  }
export type SettingsQueryResult = {
  _id: string
  _type: 'settings'
  menuItems: Array<
    | {
        _key: null
        _type: 'home'
        slug: null
        title: string | null
      }
    | {
        _key: null
        _type: 'page'
        slug: string | null
        title: string | null
      }
  > | null
  logoUrl: string | null
  team: Array<{
    name: string | null
    role: string | null
  }>
} | null
// Variable: memberBySlugQuery
// Query: *[_type == "member" && slug.current == $slug][0] {   name,   role  }
export type MemberBySlugQueryResult = {
  name: string | null
  role: string | null
} | null
// Variable: slugsByTypeQuery
// Query: *[_type == $type && defined(slug.current)]{"slug": slug.current}
export type SlugsByTypeQueryResult = Array<{
  slug: string | null
}>

declare module '@sanity/client' {
  interface SanityQueries {
    '\n  *[_type == "home"][0]{\n    _id,\n    _type,\n    slogan,\n    title,\n    poll,\n    displaypoll,\n    "imageUrl": image.asset->url,\n    "talks":*[_type == "talk"]{\n      _id,\n      _type,\n      slug,\n      title,\n      overview,\n      "talkUrl": talk.asset->url\n    },\n    "reviews":*[_type == "review"]{\n      _id,\n      _type,\n      name,\n      role,\n      content\n    }\n  }\n': HomePageQueryResult
    '\n  *[_type == "page" && slug.current == $slug][0] {\n    _id,\n    _type,\n    description,\n    overview,\n    title,\n    "slug": slug.current,\n  }\n': PagesBySlugQueryResult
    '\n  *[_type == "talk" && slug.current == $slug][0] {\n    _id,\n    _type,\n    overview,\n    description,\n    "slug": slug.current,\n    title,\n    "talkUrl": talk.asset->url\n  }\n': TalkBySlugQueryResult
    '\n  *[_type == "settings"][0]{\n    _id,\n    _type,\n    menuItems[]{\n      _key,\n      ...@->{\n        _type,\n        "slug": slug.current,\n        title\n      }\n    },\n    "logoUrl": logo.asset->url,\n    "team":*[_type == "member"]{\n      name,\n      role\n    },\n  }\n': SettingsQueryResult
    '\n  *[_type == "member" && slug.current == $slug][0] {\n   name,\n   role\n  }\n': MemberBySlugQueryResult
    '\n  *[_type == $type && defined(slug.current)]{"slug": slug.current}\n': SlugsByTypeQueryResult
  }
}
